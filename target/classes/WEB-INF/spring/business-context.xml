<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- ========================= RESOURCE DEFINITIONS ========================= -->

	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" p:location="classpath:/WEB-INF/spring/data-access-test.properties" />

	<!-- import the dataSource definition -->
	<import resource="datasource-config.xml" />

	<!-- <context:component-scan base-package="com.frogorf.files.service, com.frogorf.tutorial.service, com.frogorf.dictionary.service, com.frogorf.security.service" /> -->

	<!-- Configurer that replaces ${...} placeholders with values from a properties file -->
	<!-- (in this case, JDBC-related settings for the JPA EntityManager definition below) -->
	<!-- <context:property-placeholder location="data-access.properties" /> -->

	<!-- enables scanning for @Transactional annotations -->
	<tx:annotation-driven />

	<!-- <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"> <property name="dataSource" ref="dataSource" /> <property name="packagesToScan" value="com.frogorf.isawyou.domain" 
		/> <property name="configurationClass" value="org.hibernate.cfg.AnnotationConfiguration" /> <property name="hibernateProperties"> <props> <prop key="hibernate.dialect">${jdbc.dialect}</prop> <prop key="hibernate.show_sql">true</prop> 
		<prop key="hibernate.hbm2ddl.auto">update</prop> </props> </property> </bean> -->

	<!-- Post-processor to perform exception translation on @Repository classes (from native exceptions such as JPA PersistenceExceptions to Spring's DataAccessException hierarchy). -->
	<!-- <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" /> -->

	<!-- <jpa:repositories base-package="com.frogorf.isawyou.dao.impl" /> -->

	<!-- Custom configuration for the custom implementation based on JPA -->
	<!-- <bean id="contactRepository" class="org.springframework.samples.petclinic.repository.springdatajpa.JpaOwnerRepositoryImpl" /> -->
</beans>